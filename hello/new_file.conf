# sid configuration file
# created by Id: configrun-sid.in,v 1.40 2007/02/05 20:28:38 brolley Exp 
# run by adrian @ sirio (Linux) at Tue Apr 19 18:33:47 CEST 2011
# args: --cpu arm --no-run new_file
load libaudio.la audio_component_library
load libcache.la cache_component_library
load libcgencpu.la cgen_component_library
load libconsoles.la console_component_library
load libgdb.la gdb_component_library
load libgloss.la gloss_component_library
load libglue.la glue_component_library
load libhd44780u.la hd44780u_component_library
load libide.la ide_component_library
load libinterrupt.la interrupt_component_library
load libloader.la loader_component_library
load libmapper.la mapper_component_library
load libmemory.la mem_component_library
load libmmu.la mmu_component_library
load libparport.la parport_component_library
load libprof.la prof_component_library
load librtc.la rtc_component_library
load libsched.la sched_component_library
load libtimers.la timer_component_library
load libuart.la uart_component_library
load libx86.la x86_component_library
# first section
new hw-cpu-arm7t cpu
new hw-mapper-basic cpu-mapper
new hw-glue-sequence-8 init-sequence
new hw-glue-sequence-1 hw-reset-net
new hw-glue-sequence-8 deinit-sequence
new hw-glue-sequence-1 yield-net
new hw-glue-sequence-2 cache-flush-net
new sid-sched-host-accurate host-sched
new sid-sched-sim target-sched

# bridge component 
new bridge-tcl watcher
new some-type victim

# Cache component 
new hw-cache-basic l1-cache
new hw-cache-basic l2-cache

# disk-ide component 
new hw-disk-ide ide0

# glue-bus component 
new hw-glue-bus-mux bus-mux1new hw-glue-bus-mux bus-mux2

# interrupt-arm/ref component 
new hw-timer-arm/ref-nosched timer1
new hw-timer-arm/ref-nosched timer2
new hw-interrupt-arm/ref intcontrl

# lcd component 
new hw-lcd-hd44780u-a00 lcd 
new hw-visual-lcd display 
new sid-sched-host sched	

# parport p2 component 
new hw-parport-ps/2 pport
new hw-mapper-basic mapper
new hw-blinker-light led

# hw-remap/pause-arm/ref component 
new hw-remap/pause-arm/ref remapper
new hw-mapper-basic bus

# hw-rtc-ds1x42 component 
new sid-sched-host-accurate sched-rtc
new hw-rtc-ds1742 rtc

# hw-timer-arm/ref component 
new hw-timer-arm/ref-sched timer
new sid-sched-sim sched-timer
new hw-interrupt-arm/ref intcontrlr

# hw-uart-ns16550 component 
# components involved - cpu and bus are assumed
new hw-uart-ns16550 uart
new hw-keyboard keyboard
new hw-console console
new hw-mapper-basic bus-uart
new sid-sched-sim target-sched-uart

# hw-visual-clock component 
new hw-rtc-ds1642 rtc-visual
new hw-visual-clock clock-display

# sid-io-socket component 
new SOMETYPE source 
new SOMETYPE sink 
new sid-sched-host-accurate sched-socket
new sid-io-socket-server srv # be a server

# sid-io-stdio component 
new sid-sched-host sched-st
new sw-gloss-arm/angel angel
new sid-io-stdio stdio

# sw-profile-gprof component 
new sw-profile-gprof gprof
new SOME_KIND_OF_CPU cpu
# gloss
new sw-gloss-arm/angel gloss
# gloss <-> stdio
new sid-io-stdio stdio
# cpu loader
new sw-load-elf cpu-loader
# memory region 1 
new hw-memory-ram/rom-basic mem1
# second section
# settings
set cpu step-insn-count 10000
set host-sched num-clients 10 # large enough?
set target-sched num-clients 10 # large enough?

# Bridge component
set watcher eval! ''set p [sid::pin::new]''
set watcher eval! ''proc find_pin {name} {global p ; return $p}''
set watcher eval! ''proc driven_h4 {pin value} {puts ''triggerpoint hit v=$value!''}''

# disk-ide component
# ... configure drive 0 (master): 128*10*32 sectors = 20 MB capacity
set ide0 drive0-present? 1
set ide0 drive0-file '/tmp/drive-0-image'
set ide0 drive0-num-cylinders 128
set ide0 drive0-num-heads 10
set ide0 drive0-num-sectors-per-track 32

# scheduling (must appear before pin assignments) 
set sched num-clients 1 
set sched 0-regular? 1 
set sched 0-time 1000

# display size is in pixels - ie. font-width*display-height 
set display width 40 
set display height 11 

# hw-rtc-ds1x42 component
set sched-rtc num-clients 2
set sched-rtc 0-regular? 1
set sched-rtc 0-time 1000 # 1 sec

# hw-timer-arm/ref component
set sched-timer num-clients 1
set sched-timer enabled? 1

# hw-uart-ns16550 component
set target-sched-uart num-clients 2

# sid-io-stdio component
set sched-st enabled? 1
set sched-st num-clients 1
set sched-st 0-regular? 1
set sched-st 0-time 50
# pin connections
connect-pin main perform-activity -> host-sched advance
connect-pin main perform-activity -> target-sched advance
connect-pin main starting -> init-sequence input
connect-pin main stopping -> deinit-sequence input
connect-pin init-sequence output-0 -> hw-reset-net input
connect-pin hw-reset-net output-0 -> cpu reset!
set target-sched 0-name "CPU stepping"
connect-pin target-sched 0-event -> cpu step!
connect-pin target-sched 0-control <- cpu step-cycles
connect-pin target-sched time-query <- cpu time-query
connect-pin target-sched time-high -> cpu time-high
connect-pin target-sched time-low -> cpu time-low
connect-pin yield-net output-0 -> cpu yield
connect-pin yield-net output-0 -> host-sched yield
connect-bus cpu insn-memory cpu-mapper access-port
connect-bus cpu data-memory cpu-mapper access-port

# Bridge component
# triggerpoint: watch victim component's register 'r0' for value 0xAA
connect-pin victim watch:r0:value:0xAA -> watcher anynamen

# Cache component
connect-bus cpu insn-memory l1-cache upstream
connect-bus cpu data-memory l1-cache upstream
connect-bus l1-cache downstream l2-cache upstream
connect-bus l2-cache downstream mem read-write-port

# disk-ide component
# ... assume memory mapper named 'cpi-mapper'
# ... assume PC standard IDE channel 0 addresses
connect-bus cpu-mapper [0x3F6-0x3F7] ide0 control-block-bus
connect-bus cpu-mapper [0x1F0-0x1F7] ide0 command-block-bus
# ... assume some fictional interrupt controller
connect-pin ide0 interrupt -> fic irq14

# glue-bus component
connect-bus cpu data-memory-x bus-mux1 upstream
connect-bus coprocessor data-memory-x bus-mux2 upstream
connect-bus bus-mux1 downstream1 data-memory-x1 read-write-port
connect-bus bus-mux1 downstream2 data-memory-x2 read-write-port
connect-bus bus-mux2 downstream1 data-memory-x2 read-write-port
connect-bus bus-mux2 downstream2 data-memory-x1 read-write-port
connect-pin cpu memory-x-ctl bus-mux1 switch
connect-pin cpu memory-x-ctl bus-mux2 switch

# interrupt-arm/ref component
connect-pin timer1 interrupt -> intcontrl interrupt-source-0
connect-pin timer2 interrupt -> intcontrl interrupt-source-1
connect-pin intcontrl interrupt -> cpu nirq

# connect the LCD to the scheduler 
connect-pin sched 0-event -> lcd refresh-sync-event
connect-pin sched 0-control <- lcd refresh-sync-control

# parport ps2 component
connect-pin main starting -> pport RESET
connect-pin pport INTP -> cpu interrupt
connect-pin pport PD0 -> led signal
connect-bus mapper [0x3f0-0x3f8,4,1] pport Bus

# hw-remap/pause-arm/ref component
connect-bus cpu insn-memory remapper access-port
connect-bus cpu data-memory remapper access-port
connect-bus remapper all bus access-port

# hw-rtc-ds1x42 component 
connect-pin sched-rtc 0-event -> rtc clock
connect-pin rtc clock-control -> sched-rtc 1-control
connect-pin rtc clock-event <- sched-rtc 1-event

# hw-timer-arm/ref component 
connect-pin sched-timer 0-control <- timer divided-clock-control
connect-pin sched-timer 0-event -> timer divided-clock-event
connect-pin timer interrupt -> intcontrlr interrupt-source-4

# hw-uart-ns16550 component 
# connect uart to bus at memory-mapped address 0x800000
connect-bus bus-uart [0x800000-0x800008,4,1] uart Bus
# pin connections
connect-pin uart INTR -> cpu intr
connect-pin uart Sout -> console SIN
connect-pin keyboard SOUT -> uart Sin
connect-pin target-sched-uart 0-event -> uart rx-timeout-event
connect-pin target-sched-uart 1-event -> uart tx-timeout-event
# use 7-bits even-parity as the line discipline
set console line-disc ''bits=7 parity=even''
set keyboard line-disc ''bits=7 parity=even''


# hw-visual-clock component 
relate clock-display ''rtc window'' rtc-visual

# sid-io-socket component 
set srv sockaddr-local 0.0.0.0:3420 # listen on port 3420
set sched num-clients 1
connect-pin main starting -> srv init
connect-pin main stopping -> srv fini
connect-pin sched-socket 0-event -> srv poll-event     # adaptive polling
connect-pin sched-socket 0-control <- srv poll-control # adaptive polling
set srv verbose? 1
connect-pin srv tx <- source tx
connect-pin srv rx -> sink rx

# sid-io-stdio component 
connect-pin sched-st 0-event -> stdio poll
connect-pin angel debug-tx -> stdio stdout
connect-pin angel debug-rx <- stdio stdin1

# sw-profile-gprof component 
relate gprof target-component cpu
connect-pin shutdown-manager output-5 -> gprof store
connect-pin foo output -> cpu step!
connect-pin foo output -> gprof sample
# Set sampling interval by number of CPU instructions.
set cpu step-insn-count 127
# gloss
relate gloss cpu cpu
connect-pin init-sequence output-2 -> gloss reset
connect-pin cpu trap <-> gloss trap
connect-pin cpu trap-code -> gloss trap-code
set gloss verbose? 0
connect-bus gloss target-memory cpu-mapper access-port
# gloss <-> stdio
set host-sched 0-regular? 1
set host-sched 0-time 150 # apprx. human perception limit
connect-pin host-sched 0-event -> stdio poll
connect-pin gloss debug-tx -> stdio stdout
connect-pin gloss debug-rx <- stdio stdin
# gloss w/o gdb
connect-pin gloss process-signal -> main stop!
connect-pin gloss process-signal -> yield-net input
set cpu engine-type pbb
# cpu loader
set cpu-loader file "new_file" 
connect-bus cpu-loader load-accessor-data cpu-mapper access-port
connect-bus cpu-loader load-accessor-insn cpu-mapper access-port # don't trace loading
connect-pin init-sequence output-1 -> cpu-loader load!
connect-pin cpu-loader start-pc-set -> cpu start-pc-set!
connect-pin cpu-loader endian-set -> cpu endian-set!
connect-pin cpu-loader error -> main stop!

# memory region 1 
set mem1 size 00800000
connect-bus cpu-mapper mem1:[0,799999] mem1 read-write-port

# connect lcd 
connect-pin lcd row-col -> display row-col 
connect-pin lcd FR -> display FR 
